#!/usr/bin/env python3
"""
Script de prueba para Protocol Extractor
Verifica que todo est√© funcionando correctamente
"""

import os
import sys
from pathlib import Path

def test_imports():
    """Verifica que todas las librer√≠as est√©n instaladas"""
    print("üîç Verificando importaciones...")
    
    try:
        import requests
        print("‚úÖ requests")
    except ImportError:
        print("‚ùå requests - Instalar con: pip install requests")
        return False
    
    try:
        import openai
        print("‚úÖ openai")
    except ImportError:
        print("‚ùå openai - Instalar con: pip install openai")
        return False
    
    try:
        import markdown
        print("‚úÖ markdown")
    except ImportError:
        print("‚ùå markdown - Instalar con: pip install markdown")
        return False
    
    try:
        import rich
        print("‚úÖ rich")
    except ImportError:
        print("‚ùå rich - Instalar con: pip install rich")
        return False
    
    try:
        import lxml
        print("‚úÖ lxml")
    except ImportError:
        print("‚ùå lxml - Instalar con: pip install lxml")
        return False
    
    return True

def test_api_key():
    """Verifica la configuraci√≥n de API key"""
    print("\nüîë Verificando API Key...")
    
    api_key = os.getenv("OPENAI_API_KEY")
    if api_key:
        if api_key.startswith("sk-"):
            print(f"‚úÖ OPENAI_API_KEY configurada (****{api_key[-4:]})")
            return True
        else:
            print("‚ö†Ô∏è OPENAI_API_KEY presente pero formato inv√°lido")
            return False
    else:
        print("‚ö†Ô∏è OPENAI_API_KEY no configurada")
        print("   Para configurar: export OPENAI_API_KEY='tu-api-key'")
        return False

def test_pubmed_connection():
    """Prueba conexi√≥n con PubMed"""
    print("\nüåê Probando conexi√≥n con PubMed...")
    
    try:
        import requests
        url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"
        params = {
            "db": "pmc",
            "term": "test",
            "retmode": "json",
            "retmax": 1
        }
        response = requests.get(url, params=params, timeout=5)
        response.raise_for_status()
        print("‚úÖ Conexi√≥n con PubMed exitosa")
        return True
    except Exception as e:
        print(f"‚ùå Error conectando con PubMed: {e}")
        return False

def test_script_execution():
    """Prueba que el script principal se pueda ejecutar"""
    print("\nüìÑ Verificando script principal...")
    
    script_path = Path("protocolo_extractor.py")
    if script_path.exists():
        print("‚úÖ protocolo_extractor.py encontrado")
        
        # Verificar que se puede importar
        try:
            import protocolo_extractor
            print("‚úÖ Script se puede importar correctamente")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Error importando script: {e}")
            return False
    else:
        print("‚ùå protocolo_extractor.py no encontrado")
        return False

def run_example_search():
    """Ejecuta una b√∫squeda de ejemplo"""
    print("\nüî¨ Ejecutando b√∫squeda de ejemplo...")
    
    try:
        from protocolo_extractor import PubMedClient, CacheManager
        from pathlib import Path
        
        cache_dir = Path.home() / '.protocolo_cache'
        cache = CacheManager(cache_dir)
        client = PubMedClient(cache)
        
        # Buscar art√≠culos sobre PCR
        results = client.search_articles("PCR", max_results=3)
        
        if results:
            print(f"‚úÖ Encontrados {len(results)} art√≠culos:")
            for i, pmc_id in enumerate(results, 1):
                print(f"   {i}. PMC{pmc_id}")
            
            # Intentar recuperar el primer art√≠culo
            print("\nüìñ Recuperando primer art√≠culo...")
            article = client.fetch_article(results[0])
            print(f"‚úÖ T√≠tulo: {article.title[:60]}...")
            print(f"   Autores: {', '.join(article.authors[:3])}")
            print(f"   Journal: {article.journal} ({article.year})")
            
            if article.methods_text:
                print(f"‚úÖ Secci√≥n Methods encontrada ({len(article.methods_text)} caracteres)")
            else:
                print("‚ö†Ô∏è No se encontr√≥ secci√≥n Methods")
            
            return True
        else:
            print("‚ö†Ô∏è No se encontraron resultados")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en b√∫squeda: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("=" * 50)
    print("üß™ PROTOCOL EXTRACTOR - TEST SUITE")
    print("=" * 50)
    
    all_ok = True
    
    # Test 1: Importaciones
    if not test_imports():
        all_ok = False
    
    # Test 2: API Key
    has_api_key = test_api_key()
    if not has_api_key:
        print("   ‚ö†Ô∏è Sin API key solo funcionar√° la b√∫squeda")
    
    # Test 3: Conexi√≥n PubMed
    if not test_pubmed_connection():
        all_ok = False
    
    # Test 4: Script principal
    if not test_script_execution():
        all_ok = False
    
    # Test 5: B√∫squeda de ejemplo
    if all_ok:
        run_example_search()
    
    print("\n" + "=" * 50)
    if all_ok:
        print("‚úÖ TODAS LAS PRUEBAS PASARON")
        print("\nPuedes ejecutar:")
        print("  python protocolo_extractor.py -i")
        print("  python protocolo_extractor.py 'Western blot'")
    else:
        print("‚ö†Ô∏è ALGUNAS PRUEBAS FALLARON")
        print("Revisa los errores arriba")
    
    print("=" * 50)

if __name__ == "__main__":
    main()